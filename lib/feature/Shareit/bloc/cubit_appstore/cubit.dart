import 'package:appstore/core/utils/networking/dio_helper.dart';
import 'package:appstore/core/utils/networking/api_constants.dart';
import 'package:appstore/feature/Shareit/bloc/cubit_appstore/state.dart';
import 'package:appstore/feature/models/change_favorites.dart';
import 'package:appstore/feature/auth/data/model/model_login.dart';
import 'package:appstore/feature/models/fa.dart';
import 'package:appstore/feature/models/get_profile.dart';

import 'package:appstore/feature/models/models_update_profile.dart';
import 'package:appstore/feature/models/parthing_category.dart';
import 'package:appstore/feature/models/parthing_get_favorites.dart';

import 'package:flutter_bloc/flutter_bloc.dart';

class ShopCubit extends Cubit<StateLoginShop> {
  ShopCubit() : super(InInitialLogState());

  static ShopCubit get(context) => BlocProvider.of(context);

///////////////////////////////////////
  int indextBottomNBar = 2;

//////////////////////////////////////
  int t11 = 5;

  String s1 = ' Error';

  void funChangeIndextBottomNBar(int indext) {
    indextBottomNBar = indext;
    // print(" indext : $indext");

    if (indextBottomNBar == 1) {
      getFav();
      //  print("GetFavorites");
    }
    if (indextBottomNBar == 3) {
      getProfile();
    }

    emit(ChangeIndextBottomNBar(indextBottomNBar));
    //   print(  'ChangeIndextBottomNBar :$indextBottomNBar' );
  }

///////////////////////////////
  HomeUser? obHomeUser;
  Map<int, bool> fav = {};

  uSerHome({String? tokin}) {
    // print('     token  $s1');
    //   Tokin =s1!;
    return DioHelper.get(
            url: ApiConstants.home, queryParameter: null, token: tokin)
        .then((value) {
      // print(value.data);
      obHomeUser = HomeUser.ofJson(value.data);

      for (var element in obHomeUser!.data!.listproducts!) {
        fav.addAll({element.id!: element.infavorites!});
      }

      emit(HomeUSuccessState());
    }).catchError((e) {
      emit(HomeUserErrorState(e.toString()));
      //  print(e);
    });
  }

/////////////////////////////////
  CategoryModel? categ;

  userCategory() {
    DioHelper.get(
            url: ApiConstants.getCategory,
            token: ApiConstants.tokin1,
            queryParameter: null)
        .then((value) {
      //print(value.data.toString());
      categ = CategoryModel.forjson(value.data);

      emit(SeccessfullGetCategory());
    }).catchError((e) {
      //   print(e);
    });
  }

//////////////get favorites -- بدى بينات ويرجع قيمه
  FavoritesModel? favoritesModel;

  Favorite? f;

  void getFav() {
    emit(LoadingchangeFav());

    DioHelper.get(
      url: ApiConstants.postFavorite,
      token: ApiConstants.tokin1,
    ).then((value) {
      //  print(value.data);
      favoritesModel = FavoritesModel.forjson(value.data);
      //  if (value.data != null ) f  =   favorite.fromJson(value.data) ;

      emit(SeccessfullGetFavorites());
    }).catchError((e) {
      //   print(e.toString());
      emit(ErrorGetFavorites());
    });
  }

  ///////////////////////////////

//////////////////////////set  favorites  -- بادى بيانات وباخد قيمه
  ChangeFavoritesModels? changeFavoritesModels;

  void postChangeColorFavorite(int idFavorites) {
    fav[idFavorites] = !fav[idFavorites]!;
    emit(ChangeColorFavoriteState());
    DioHelper.postData(
            url: ApiConstants.postFavorite,
            data: {"product_id": idFavorites},
            token: ApiConstants.tokin1)
        .then((value) {
      changeFavoritesModels = ChangeFavoritesModels(value.data);

      if (changeFavoritesModels!.status! == false) {
        fav[idFavorites] = !fav[idFavorites]!;
      } else {
        getFav();
      }

      emit(ChangeSeccesfulColorFavoriteState(
          stateF: changeFavoritesModels!.status,
          message: changeFavoritesModels!.message));
    }).catchError((e) {
      fav[idFavorites] = !fav[idFavorites]!;
      //    print("Favorites Error");
    });
  }

//////////////////////////////////////

  Autogenerated? modelsGetProfile;
  void getProfile() {
    DioHelper.get(url: ApiConstants.getFavorites, token: ApiConstants.tokin1)
        .then((value) {
      modelsGetProfile = Autogenerated.fromJson(value.data);

      emit(SeccessfullGetProfile(
          email: modelsGetProfile!.data!.email,
          name: modelsGetProfile!.data!.name,
          phone: modelsGetProfile!.data!.phone));
      // print(value.data);
      //print(ModelsGetProfile!.data!.phone);
    }).catchError((e) {
      emit(ErrorGetProfile());
      //   print(e);
    });
  }

  ////////////////////  غير مستخدمه

  UpdateProfile? updateprofile;

//// post ==  but put + tokin
  void funUpdateProfile(
      {required String name, required String email, required String phone}) {
    DioHelper.putData(
        url: ApiConstants.updateProfile,
        token: ApiConstants.tokin1,
        data: {
          "name": name,
          "phone": phone,
          "email": email,
        }).then((value) {
      updateprofile = UpdateProfile.fromJson(value.data);
      // print(value.data);
      emit(SuccessUpdateProfileState(
          updateprofile!.status, updateprofile!.message));
    }).catchError((e) {
      emit(ErrorUpdateProfile());
    });
  }

  // Weather1? modelGetWeather;
  // void getfunWeather({String? url, String? key, String? nameCountry}) {
  //   DioWeather.getWeather(url: "search", queryParameter: {
  //     "key": "91a133d44eab4178b5c100237233004",
  //     "q": "$nameCountry"
  //   }).then((value) {
  //     modelGetWeather = Weather1.forJson(value.data);
  //     //print(value.data);

  //     emit(SeccessfullgetWeather());
  //   }).catchError((e) {
  //     emit(ErrorgetWeather());
  //     // print(e);
  //   });
  // }
}
